name: CI
on:
  push:
    branches:
      - '**'
      - '!ws-iac-scan-results/**'
      - '!whitesource-remediate/master-all**'
      - '!whitesource/migrate-configuration**'
    tags:
      - '*'
  schedule:
    - cron: '0 4 * * *'
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set Environment Variables
        run: |
          TOOL_NAME=$(echo '${{ github.repository }}' |awk -F '/' '{gsub(/-/, "_", $0) ;print $NF}')
          echo "TOOL_NAME=$TOOL_NAME" >> $GITHUB_ENV
          echo "RELEASE=false" >> $GITHUB_ENV
          echo "VERSION=0.0.0.ci0" >> $GITHUB_ENV
          echo "TOOL_DIR=$TOOL_NAME" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=$(echo ${{github.ref}} |  sed -r 's/^[\/a-zA-z-]+//')" >> $GITHUB_ENV
            if [[ $VERSION != *@(a|b)* ]]; then
              echo "RELEASE=true" >> $GITHUB_ENV
            fi
          fi
      - uses: actions/checkout@v4
      - name: Set package version
        run: |
          sed -E -i  "s/^__version__ = \"[a-z0-9\.]+\"/__version__ = \"$VERSION\"/g"  ${{ env.TOOL_DIR }}/_version.py
#       - uses: UnicornGlobal/trufflehog-actions-scan@master
#         with:
#           branch: ${{ github.head_ref }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,F841
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Unittesting
        run: python -m unittest
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: whitesourcetools/${{ github.event.repository.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ env.VERSION}}
          flavor: |
            latest=true
#      - name: Build and push Docker image
#        if: startsWith(github.ref, 'refs/tags/v')
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#      - name: Image digest
#        if: startsWith(github.ref, 'refs/tags/v')
#        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Publish to Confluence
        if: ${{ env.RELEASE }}
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 2468971131
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
