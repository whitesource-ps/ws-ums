name: WS Python SDK Build and Publish - Master
on:
  push:
    branches:
      - '**'
    tags:
      - '*'
  schedule:
    - cron: '0 4 * * *'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      TOOL_NAME: ws_ums
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: Set Environment Variables
        run: |
          echo "RELEASE=false" >> $GITHUB_ENV
          echo "VERSION=0.0.0.ci0" >> $GITHUB_ENV
          echo "TOOL_DIR=$TOOL_NAME" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=$(echo ${{github.ref}} |  sed -r 's/^[\/a-zA-z-]+//')" >> $GITHUB_ENV
            if [[ $VERSION != *@(a|b)* ]]; then
              echo "RELEASE=true" >> $GITHUB_ENV
            fi
          fi
      - uses: actions/checkout@v2
      - name: Set package version
        run: |
          sed -E -i  "s/^__version__ = \"[a-z0-9\.]+\"/__version__ = \"$VERSION\"/g"  ${{ env.TOOL_DIR }}/_version.py
      - uses: UnicornGlobal/trufflehog-actions-scan@master
        with:
          branch: ${{ github.head_ref }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,F841
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Unittesting
        run: python -m unittest
      - name: Prepare tag
        id: prep
        run: |
          DOCKER_IMAGE=whitesourcetools/ws-sbom-generator
          TAGS="${DOCKER_IMAGE}:latest"
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAG_V=${GITHUB_REF#refs/tags/v}
            TAGS="$TAGS,${DOCKER_IMAGE}:${TAG_V}"
          fi
          echo "TAGS=$TAGS" >> $GITHUB_ENV
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.TAGS }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Publish to Confluence
        if: github.ref == 'refs/heads/master'
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: README.md
          to: 2260402185
          cloud: whitesource
          user: ${{ secrets.CONFLUENCE_USER }}
          token: ${{ secrets.CONFLUENCE_TOKEN }}
